
var PROJECT='Katana'
var AUTHORS='Microsoft'
var SHIP='${Version(4, 2, 1, "rtw")}'
var DEV='${Version(0, 31, 0, "pre")}'
set FINAL_MILESTONE='${true}'
var AZUREAD_VERSION='5.3.0'
var AZUREAD_SUFFIX=''
var VERSION='${SHIP.VERSION}'
var FULL_VERSION='${SHIP.FULL_VERSION}'
var PROJECT_URL='https://github.com/aspnet/AspNetKatana/'
var TAGS='Microsoft OWIN Katana'

var BASE_DIR='${Directory.GetCurrentDirectory()}'
var KEY_FILE='${Files.Include("*.snk").Select(x=>Path.Combine(BASE_DIR,x)).SingleOrDefault()}'
set OFFICIAL_BUILD='${!string.IsNullOrEmpty(KEY_FILE)}'

var TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
var BUILD_DIR='${Path.Combine(TARGET_DIR, "compile")}'
var TEST_DIR='${Path.Combine(TARGET_DIR, "test")}'
var SIGN_DIR='${Path.Combine(TARGET_DIR, "sign")}'
var PACKAGE_DIR='${Path.Combine(TARGET_DIR, "package")}'

var NUGET_GALLERY_SOURCE='https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json'
var NUGET_ASPNET_SOURCE='https://pkgs.dev.azure.com/dnceng/public/_packaging/myget-legacy/nuget/v3/index.json'
-// var NUGET_AZUREAD_SOURCE='https://www.myget.org/F/azureadwebstacknightly/'
var NUGET_AZUREAD_SOURCE=''

var NUGET_DEPLOY='https://dotnet.myget.org/F/katana-dev/'

log info='PROJECT: ${PROJECT}' if='PROJECT != ""'
log info='SHIP.FULL_VERSION: ${SHIP.FULL_VERSION}'
log info='DEV.FULL_VERSION: ${DEV.FULL_VERSION}'
log info='SHIP.FILE_VERSION: ${SHIP.FILE_VERSION}'
log info='DEV.FILE_VERSION: ${DEV.FILE_VERSION}'
log info='KEY_FILE: ${KEY_FILE}' if='KEY_FILE != ""'
log info='OFFICIAL_BUILD: ${OFFICIAL_BUILD}' 

var shipping='${new[] {
  "OwinHost",
  "Microsoft.Owin",
  "Microsoft.Owin.Security",
  "Microsoft.Owin.Security.Facebook",
  "Microsoft.Owin.Security.Cookies",
  "Microsoft.Owin.Security.Google",
  "Microsoft.Owin.Security.OAuth",
  "Microsoft.Owin.Security.Twitter",
  "Microsoft.Owin.Security.MicrosoftAccount",
  "Microsoft.Owin.Security.ActiveDirectory",
  "Microsoft.Owin.Security.WsFederation",
  "Microsoft.Owin.Security.OpenIdConnect",
  "Microsoft.Owin.Security.Jwt",
  "Microsoft.Owin.FileSystems",
  "Microsoft.Owin.StaticFiles",
  "Microsoft.Owin.Host.SystemWeb",
  "Microsoft.Owin.Host.HttpListener",
  "Microsoft.Owin.Hosting",
  "Microsoft.Owin.Diagnostics",
  "Microsoft.Owin.SelfHost",
  "Microsoft.Owin.Cors",
  "Microsoft.Owin.Testing",
}}'

var metapackages='${new[] {
  "Microsoft.Owin.SelfHost",
}}'

var skip="${new string[] {
  }}"

set if='IsMono' skip='${new[]{
    "./**/*.Tests.csproj",
  }}'

var BUILD_PROJECTS='${Files.Include("src/**/*.csproj").Exclude(skip)}'
var TEST_PROJECTS='${Files.Include("tests/**/*.Tests.csproj").Include("tests/**/*.IntegrationTests.csproj").Exclude("tests/**/*.Sandbox.*.csproj").Exclude("tests/Katana.Performance.ReferenceApp.Tests/Katana.Performance.ReferenceApp.Tests.csproj")}'
var TEST_ASSEMBLIES='${Files.Include(TEST_DIR + "/**/*.Tests.dll")}'

test if='IsMono'
  set TEST_PROJECTS='${Files.Include("./**/Microsoft.Owin.Hosting.Tests.csproj")}'

-// include range of standard general targets. run "sake targets" to display
use-standard-lifecycle

-// include sets of standard work targets. features include 'nuget,xunit,nunit'
use-standard-goals features='nuget,xunit'

-// additional work targets are defined below

#version-target target='post-clean'
  log info='Emitting ./build/Katana.version.targets'
  @{
    // Emit a version targets file for the official builds
    string fileName = "./build/Katana.version.targets";
    File.WriteAllText(fileName,
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine
        + "<Project ToolsVersion=\"12.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">" + Environment.NewLine
        + "  <PropertyGroup>" + Environment.NewLine
        + "    <ShipVersion>" + SHIP.VERSION + "</ShipVersion>" + Environment.NewLine
        + "    <ShipStrongNameVersion>" + SHIP.SN_VERSION + "</ShipStrongNameVersion>" + Environment.NewLine
        + "    <ShipFullVersion>" + SHIP.FULL_VERSION + "</ShipFullVersion>" + Environment.NewLine
        + "    <ShipFileVersion>" + SHIP.FILE_VERSION + "</ShipFileVersion>" + Environment.NewLine
        + "    <MajorVersion>" + SHIP.MAJOR + "</MajorVersion>" + Environment.NewLine
        + "    <MinorVersion>" + SHIP.MINOR + "</MinorVersion>" + Environment.NewLine
        + "    <PatchVersion>" + SHIP.PATCH + "</PatchVersion>" + Environment.NewLine
        + "    <BuildQuality>" + SHIP.MILESTONE + "</BuildQuality>" + Environment.NewLine
        + "    <BuildDate>" + BuildDate() + "</BuildDate>" + Environment.NewLine
        + "    <BranchSuffix>" + BranchSuffix() + "</BranchSuffix>" + Environment.NewLine
        + "    <ProjectUrl>" + PROJECT_URL + "</ProjectUrl>" + Environment.NewLine
        + "    <Tags>" + TAGS + "</Tags>" + Environment.NewLine
        + "  </PropertyGroup>" + Environment.NewLine
        + "</Project>" + Environment.NewLine
        );
  }

#assemblyinfo-initialize target='initialize'
  var assemblyVersion='${SHIP.SN_VERSION}'
  var assemblyFileVersion='${SHIP.FILE_VERSION}'
  var assemblyInformationalVersion='${SHIP.FULL_VERSION}'
  var assemblyCopyright='\x00a9 Microsoft Corporation All rights reserved.' 
  assemblyinfo each='var updateFile in Files.Include("./build/CommonAssemblyInfo.cs")' 

#assemblyinfo-dev-initialize target='initialize'
  var assemblyVersion='${DEV.SN_VERSION}'
  var assemblyFileVersion='${DEV.FILE_VERSION}'
  var assemblyInformationalVersion='${DEV.FULL_VERSION}'
  var assemblyCopyright='\x00a9 Microsoft Corporation All rights reserved.' 
  assemblyinfo each='var updateFile in Files.Include("src/**/*AssemblyInfo.cs", "tests/**/*AssemblyInfo.cs", "./build/DevAssemblyInfo.cs")'

#assemblyinfo-rev-initialize target='initialize'
  for each='var updateFile in Files.Include("src/**/AssemblyInfo.cs", "tests/**/AssemblyInfo.cs")'
    var up1='${Path.GetDirectoryName(updateFile)}'
    var up2='${Path.GetDirectoryName(up1)}'
    test if='Path.GetFileName(up1) == "Properties"'
      test if='!string.IsNullOrEmpty(SourceRevision())'
        assemblyinfo assemblyTitle='${Path.GetFileName(up2)} (${SourceRevision()})'
      else
        assemblyinfo assemblyTitle='${Path.GetFileName(up2)}'

var signing='${new List<string>()}'

#build-compile target='compile' description='Compile primary project'
  for each='var projectFile in BUILD_PROJECTS.Except(TEST_PROJECTS)' 
    var outputDirName='${Path.GetFileNameWithoutExtension(projectFile)}'
    var outputFileName='${Path.GetFileName(Path.GetDirectoryName(projectFile))}.dll'

    var outputDir='${Path.Combine(BUILD_DIR, outputDirName)}'

    test if='KEY_FILE != ""'
      build configuration='Release' extra='/t:Rebuild "/p:KeyFile=${KEY_FILE}"'
    else
      build configuration='Release' extra='/t:Rebuild'

    copy sourceDir='${Path.GetDirectoryName(projectFile)}' include='*.nuspec' overwrite='${true}'

    use namespace='System.Xml.Linq'
    var doc='${XDocument.Load(projectFile)}'
    var ns='http://schemas.microsoft.com/developer/msbuild/2003'
    var itemGroups='${doc.Elements(XName.Get("Project", ns)).Elements(XName.Get("ItemGroup", ns))}'
    var compileItems='${itemGroups.Elements(XName.Get("Compile", ns))}'
    var contentItems='${itemGroups.Elements(XName.Get("Content", ns))}'
    var noneItems='${itemGroups.Elements(XName.Get("None", ns))}'
    var razorItems='${contentItems.Union(noneItems).Where(x=>x.Attribute("Include").Value.EndsWith(".cshtml"))}'

    for each='var compileElt in compileItems.Union(razorItems)'
      var linkElt='${compileElt.Elements(XName.Get("Link", ns)).SingleOrDefault()}'

      var sourceFile='${compileElt.Attribute("Include").Value}'
      var targetFile='${linkElt == null ? sourceFile : linkElt.Value}'

      var sourceFull='${Path.Combine(Path.GetDirectoryName(projectFile), sourceFile)}'
      var targetFull='${Path.Combine(outputDir, "src", targetFile)}'
      directory create='${Path.GetDirectoryName(targetFull)}'
      -File.Copy(sourceFull, targetFull, true);


#sign-compile target='compile' description='Sign primary compiled outputs'
  @{
    Func<Action,Action,Action> and = (a,b)=>()=>{a();b();};
    Action copySigned = ()=>{};
  }

  test if='OFFICIAL_BUILD'
    directory create='${Path.Combine(SIGN_DIR, "input", "Net40")}'
    directory create='${Path.Combine(SIGN_DIR, "input", "Net45")}'
    directory create='${Path.Combine(SIGN_DIR, "output", "Net40")}'
    directory create='${Path.Combine(SIGN_DIR, "output", "Net45")}'
    for each='var assemblyFile in Files.BasePath(BUILD_DIR).Include("**/Microsoft.*.dll", "**/OwinHost.exe", "**/Katana.Boot.AspNet.dll")'
      var assemblyName='${Path.GetFileNameWithoutExtension(assemblyFile)}'
      var extension='${Path.GetExtension(assemblyFile)}'
      var folderName='${Path.GetFileName(Path.GetDirectoryName(assemblyFile))}'

      var frameworkName=''
      set frameworkName='Net45' if='folderName == assemblyName || folderName == assemblyName + ".Net45"'
      set frameworkName='Net40' if='folderName == assemblyName + ".Net40"'

      test if='frameworkName != ""'
        log info='Signing ${frameworkName} ${assemblyFile}'
        @{
          var initialFile = Path.Combine(BUILD_DIR, assemblyFile);
          var inputFile = Path.Combine(SIGN_DIR, "input", frameworkName, assemblyName + extension);
          var outputFile = Path.Combine(SIGN_DIR, "output", frameworkName, assemblyName + extension);
          var finalFile = Path.Combine(PACKAGE_DIR, assemblyFile);

          File.Copy(initialFile, inputFile, true);
          copySigned = and(copySigned, ()=>File.Copy(outputFile, finalFile, true));
        }
    build projectFile='BuildServer.targets' configuration='Release' extra='/t:SignArtifacts "/p:Sign=Sign;BranchName=Dev"'

  directory delete='${PACKAGE_DIR}'
  copy sourceDir='${BUILD_DIR}' outputDir='${PACKAGE_DIR}'
  -copySigned();


#nuget-initialize target='initialize'
  var extra='-Source ${NUGET_GALLERY_SOURCE};${NUGET_ASPNET_SOURCE};${NUGET_AZUREAD_SOURCE} -NoCache'
  nuget-install each='var package in Files.Include("src/**/packages.config","tests/**/packages.config").Exclude("tests/*.Sandbox.*/*")' outputDir='packages'

#prep-metapackages target='compile' description='Prep meta-packages'
  for each='var metapackage in metapackages'
    log info='Copying files for ${metapackage}'
    copy sourceDir='${Path.Combine("src", metapackage)}' outputDir='${Path.Combine(PACKAGE_DIR, metapackage)}'

#nuget-package target='package' description='Create NuGet packages'
  for each='var file in Files.Include(PACKAGE_DIR + "/**/*.nuspec")'
    var doc='${XDocument.Load(file)}'
    var fileElts='${doc
        .Elements(XName.Get("package", "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"))
        .Elements(XName.Get("files", "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"))
        .Elements(XName.Get("file", "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"))}'
    for each='var fileElt in fileElts'
      var srcAttr='${fileElt.Attribute(XName.Get("src"))}'
      -if (srcAttr == null) continue;
      var segments='${srcAttr.Value.Split((char)'\\')}'
      -if (segments[0] != "..") continue;

      var up1='${Path.GetDirectoryName(file)}'
      var up2='${Path.GetDirectoryName(up1)}'
      log info='Copy ${segments[1]}'
      copy sourceDir='${Path.Combine(up2, segments[1])}' outputDir='${Path.Combine(up1, segments[1])}' include='${segments[2]}' overwrite='${true}'
      -srcAttr.Value = srcAttr.Value.Substring(3);
    -doc.Save(file);

    var baseName='${Path.GetFileNameWithoutExtension(file)}'
    
    var packageVersion='${DEV.FULL_VERSION}'
    set packageVersion='${SHIP.FULL_VERSION}' if='shipping.Contains(baseName)'

    use namespace='System.Reflection'
    var assemblyName='${Path.Combine(Path.GetDirectoryName(file), baseName + ".dll")}'
    var title='${baseName}'
    var description='${baseName}'
    test if='File.Exists(assemblyName)'
      @{
        var assembly = Assembly.LoadFrom(assemblyName);
        description = assembly.GetCustomAttribute<AssemblyDescriptionAttribute>().Description;
        if (string.IsNullOrEmpty(description))
        {
          description = baseName;
        }
        title = assembly.GetCustomAttribute<AssemblyTitleAttribute>().Title;
        if (string.IsNullOrEmpty(title))
        {
          title = baseName;
        }
      }
    test if='OFFICIAL_BUILD && RELEASE_BUILD'
      -title = title.Split(new[]{"("}, StringSplitOptions.None)[0];
    test if='OFFICIAL_BUILD && !RELEASE_BUILD'
      -title = title.Split(new[]{"("}, StringSplitOptions.None)[0] + string.Format(" (nightly {0:yyyy MMM dd})", DateTime.Now);

    var azureAdVersion='${AZUREAD_VERSION}'
    var azureAdSuffix='${AZUREAD_SUFFIX}'
    set azureAdSuffix='' if='OFFICIAL_BUILD && RELEASE_BUILD && FINAL_MILESTONE'

    var projectUrl='${PROJECT_URL}'
    var tags='${TAGS}'

    nuget-pack nuspecFile='${file}' outputDir='${TARGET_DIR}' extra='-NoPackageAnalysis -Symbols -Properties "id=${baseName};authors=${AUTHORS};author=${AUTHORS};title=${title};description=${description};projectUrl=${projectUrl};tags=${tags};azureAdVersion=${azureAdVersion};azureAdSuffix=${azureAdSuffix}"'

#nuget-deploy target='deploy' description='Upload NuGet packages to gallery'
  var extra=''
  set extra='${extra} -Source ${NUGET_DEPLOY}' if='!string.IsNullOrEmpty(NUGET_DEPLOY)'
  nuget-push each='var nupkgFile in Files.Include(Path.Combine(TARGET_DIR, "*.nupkg"))'

#download-package target='package'
  var DOWNLOAD_DIR='${Path.Combine(TARGET_DIR, "download")}'
  var DOWNLOAD_FILE='${Path.Combine(TARGET_DIR, "Katana." + DEV.FULL_VERSION + ".zip")}'
  var includeFiles='${new[]{
    "OwinHost/Owin.dll",
    "OwinHost/OwinHost.exe",
    "OwinHost/OwinHost.exe.config",
    "Microsoft.Owin/Microsoft.Owin.dll",
    "Microsoft.Owin.Hosting/Microsoft.Owin.Hosting.dll",
    "Microsoft.Owin.Host.HttpListener/Microsoft.Owin.Host.HttpListener.dll"
  }}'
  var includeRoot='${new[]{"LICENSE.txt", "NOTICE.txt", "DISCLAIMER.txt"}}'
  var overwrite='${true}'

  copy outputDir='${DOWNLOAD_DIR}' sourceDir='.' each='var include in includeRoot'
  for each='var file in includeFiles'
    @{ var fileDir = Path.GetDirectoryName(file); }
    @{ var fileName = Path.GetFileName(file); }
    copy outputDir='${DOWNLOAD_DIR}/bin' sourceDir='${PACKAGE_DIR}/${fileDir}' include='${fileName}'

  log info='Compressing ${DOWNLOAD_DIR}'
  test if='File.Exists(DOWNLOAD_FILE)' -File.Delete(DOWNLOAD_FILE);
  use assembly='System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL'
  use namespace='System.IO.Compression'
  -ZipFile.CreateFromDirectory(DOWNLOAD_DIR, DOWNLOAD_FILE);


#xunit-integration-test target="integration-test" description='Run xunit tests'
  var INTEGRATIONTEST_ASSEMBLIES='${Files.Include(Path.Combine(TEST_DIR, "**/*.IntegrationTests.dll"))}'
  xunit each='var testFile in INTEGRATIONTEST_ASSEMBLIES'

#release
  @{
    // To publish, call `build release deploy`
    RELEASE_BUILD = true;
    NUGET_DEPLOY = '';
    VERSION = SHIP.VERSION;
    FULL_VERSION = SHIP.FULL_VERSION;
  }
  log info='Versions updated for release'
  log info='SHIP.FULL_VERSION: ${SHIP.FULL_VERSION}'
  log info='DEV.FULL_VERSION: ${DEV.FULL_VERSION}'
  log info='SHIP.FILE_VERSION: ${SHIP.FILE_VERSION}'
  log info='DEV.FILE_VERSION: ${DEV.FILE_VERSION}'

functions
  @{
    static bool RELEASE_BUILD;
    static bool OFFICIAL_BUILD;
    static bool FINAL_MILESTONE;
    BuildVersion Version(int major, int minor, int patch, string milestone = "")
    {
      return new BuildVersion 
      {
        MAJOR = major, 
        MINOR = minor, 
        PATCH = patch, 
        MILESTONE = milestone,
      };
    }
    static string BuildDate()
    {
      var now = DateTime.Now;
      return (now.Year - 2011) + DateTime.Now.ToString("MMdd");
    }
    static string BuildNumber()
    {
      var buildNumber = Environment.GetEnvironmentVariable("BUILD_NUMBER");
      if (String.IsNullOrEmpty(buildNumber))
      {
        return "0";
      }
      return buildNumber;
    }
    static string BranchSuffix()
    {
      string branchName = Environment.GetEnvironmentVariable("BRANCH_SUFFIX");
      if (!string.IsNullOrEmpty(branchName))
      {
        return branchName;
      }
      return "";
    }
    static string SourceRevision()
    {
      return Environment.GetEnvironmentVariable("SourceRevision");
    }
    class BuildVersion 
    {
      public int MAJOR {get;set;}
      public int MINOR {get;set;}
      public int PATCH {get;set;}
      public string MILESTONE {get;set;}
      public string PRERELEASE
      {
        get 
        {
		  if (OFFICIAL_BUILD && RELEASE_BUILD && FINAL_MILESTONE)
		  {
			return "";
		  }
		  // -MILESTONE-BUILD_NUMBER-BUILD_SUFFIX
          var pre = "";
          if (!String.IsNullOrEmpty(MILESTONE))
          {
            pre = "-" + MILESTONE;
          }
          if (!RELEASE_BUILD)
          {
            var buildNumber = "000" + Environment.GetEnvironmentVariable("BUILD_NUMBER");
            buildNumber = buildNumber.Substring(buildNumber.Length - 3);
            pre += "-" + buildNumber;

		    if (!String.IsNullOrEmpty(BranchSuffix()))
		    {
			  pre += "-" + BranchSuffix();
		    }
          }
          return pre;
        }
      }
      public string VERSION 
      {
        get {return MAJOR + "." + MINOR + "." + PATCH;}
      }
      public string SN_VERSION 
      {
        get { return MAJOR + "." + MINOR + "." + PATCH + ".0"; }
      }
      public string FULL_VERSION 
      {
        get {return MAJOR + "." + MINOR + "." + PATCH + PRERELEASE;}
      }
      public string FILE_VERSION 
      {
        get {return MAJOR + "." + MINOR + "." + BuildDate() + "." + BuildNumber();}
      }
    }
  }
